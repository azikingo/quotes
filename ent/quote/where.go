// Code generated by ent, DO NOT EDIT.

package quote

import (
	"team-manager/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Quote {
	return predicate.Quote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Quote {
	return predicate.Quote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Quote {
	return predicate.Quote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Quote {
	return predicate.Quote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Quote {
	return predicate.Quote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Quote {
	return predicate.Quote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Quote {
	return predicate.Quote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Quote {
	return predicate.Quote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Quote {
	return predicate.Quote(sql.FieldLTE(FieldID, id))
}

// Quote applies equality check predicate on the "quote" field. It's identical to QuoteEQ.
func Quote(v string) predicate.Quote {
	return predicate.Quote(sql.FieldEQ(FieldQuote, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v float32) predicate.Quote {
	return predicate.Quote(sql.FieldEQ(FieldAuthor, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Quote {
	return predicate.Quote(sql.FieldEQ(FieldCreatedAt, v))
}

// QuoteEQ applies the EQ predicate on the "quote" field.
func QuoteEQ(v string) predicate.Quote {
	return predicate.Quote(sql.FieldEQ(FieldQuote, v))
}

// QuoteNEQ applies the NEQ predicate on the "quote" field.
func QuoteNEQ(v string) predicate.Quote {
	return predicate.Quote(sql.FieldNEQ(FieldQuote, v))
}

// QuoteIn applies the In predicate on the "quote" field.
func QuoteIn(vs ...string) predicate.Quote {
	return predicate.Quote(sql.FieldIn(FieldQuote, vs...))
}

// QuoteNotIn applies the NotIn predicate on the "quote" field.
func QuoteNotIn(vs ...string) predicate.Quote {
	return predicate.Quote(sql.FieldNotIn(FieldQuote, vs...))
}

// QuoteGT applies the GT predicate on the "quote" field.
func QuoteGT(v string) predicate.Quote {
	return predicate.Quote(sql.FieldGT(FieldQuote, v))
}

// QuoteGTE applies the GTE predicate on the "quote" field.
func QuoteGTE(v string) predicate.Quote {
	return predicate.Quote(sql.FieldGTE(FieldQuote, v))
}

// QuoteLT applies the LT predicate on the "quote" field.
func QuoteLT(v string) predicate.Quote {
	return predicate.Quote(sql.FieldLT(FieldQuote, v))
}

// QuoteLTE applies the LTE predicate on the "quote" field.
func QuoteLTE(v string) predicate.Quote {
	return predicate.Quote(sql.FieldLTE(FieldQuote, v))
}

// QuoteContains applies the Contains predicate on the "quote" field.
func QuoteContains(v string) predicate.Quote {
	return predicate.Quote(sql.FieldContains(FieldQuote, v))
}

// QuoteHasPrefix applies the HasPrefix predicate on the "quote" field.
func QuoteHasPrefix(v string) predicate.Quote {
	return predicate.Quote(sql.FieldHasPrefix(FieldQuote, v))
}

// QuoteHasSuffix applies the HasSuffix predicate on the "quote" field.
func QuoteHasSuffix(v string) predicate.Quote {
	return predicate.Quote(sql.FieldHasSuffix(FieldQuote, v))
}

// QuoteIsNil applies the IsNil predicate on the "quote" field.
func QuoteIsNil() predicate.Quote {
	return predicate.Quote(sql.FieldIsNull(FieldQuote))
}

// QuoteNotNil applies the NotNil predicate on the "quote" field.
func QuoteNotNil() predicate.Quote {
	return predicate.Quote(sql.FieldNotNull(FieldQuote))
}

// QuoteEqualFold applies the EqualFold predicate on the "quote" field.
func QuoteEqualFold(v string) predicate.Quote {
	return predicate.Quote(sql.FieldEqualFold(FieldQuote, v))
}

// QuoteContainsFold applies the ContainsFold predicate on the "quote" field.
func QuoteContainsFold(v string) predicate.Quote {
	return predicate.Quote(sql.FieldContainsFold(FieldQuote, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v float32) predicate.Quote {
	return predicate.Quote(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v float32) predicate.Quote {
	return predicate.Quote(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...float32) predicate.Quote {
	return predicate.Quote(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...float32) predicate.Quote {
	return predicate.Quote(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v float32) predicate.Quote {
	return predicate.Quote(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v float32) predicate.Quote {
	return predicate.Quote(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v float32) predicate.Quote {
	return predicate.Quote(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v float32) predicate.Quote {
	return predicate.Quote(sql.FieldLTE(FieldAuthor, v))
}

// AuthorIsNil applies the IsNil predicate on the "author" field.
func AuthorIsNil() predicate.Quote {
	return predicate.Quote(sql.FieldIsNull(FieldAuthor))
}

// AuthorNotNil applies the NotNil predicate on the "author" field.
func AuthorNotNil() predicate.Quote {
	return predicate.Quote(sql.FieldNotNull(FieldAuthor))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Quote {
	return predicate.Quote(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Quote {
	return predicate.Quote(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Quote {
	return predicate.Quote(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Quote {
	return predicate.Quote(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Quote {
	return predicate.Quote(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Quote {
	return predicate.Quote(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Quote {
	return predicate.Quote(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Quote {
	return predicate.Quote(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Quote) predicate.Quote {
	return predicate.Quote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Quote) predicate.Quote {
	return predicate.Quote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Quote) predicate.Quote {
	return predicate.Quote(sql.NotPredicates(p))
}
