// Code generated by ent, DO NOT EDIT.

package ent

import (
	"team-manager/ent/quote"
	"team-manager/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   quote.Table,
			Columns: quote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: quote.FieldID,
			},
		},
		Type: "Quote",
		Fields: map[string]*sqlgraph.FieldSpec{
			quote.FieldQuote:     {Type: field.TypeString, Column: quote.FieldQuote},
			quote.FieldAuthor:    {Type: field.TypeFloat32, Column: quote.FieldAuthor},
			quote.FieldCreatedAt: {Type: field.TypeTime, Column: quote.FieldCreatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldTgID:      {Type: field.TypeInt64, Column: user.FieldTgID},
			user.FieldUsername:  {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldName:      {Type: field.TypeString, Column: user.FieldName},
			user.FieldSurname:   {Type: field.TypeString, Column: user.FieldSurname},
			user.FieldEmail:     {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldPhone:     {Type: field.TypeString, Column: user.FieldPhone},
			user.FieldCreatedAt: {Type: field.TypeTime, Column: user.FieldCreatedAt},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (qq *QuoteQuery) addPredicate(pred func(s *sql.Selector)) {
	qq.predicates = append(qq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the QuoteQuery builder.
func (qq *QuoteQuery) Filter() *QuoteFilter {
	return &QuoteFilter{config: qq.config, predicateAdder: qq}
}

// addPredicate implements the predicateAdder interface.
func (m *QuoteMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the QuoteMutation builder.
func (m *QuoteMutation) Filter() *QuoteFilter {
	return &QuoteFilter{config: m.config, predicateAdder: m}
}

// QuoteFilter provides a generic filtering capability at runtime for QuoteQuery.
type QuoteFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *QuoteFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *QuoteFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(quote.FieldID))
}

// WhereQuote applies the entql string predicate on the quote field.
func (f *QuoteFilter) WhereQuote(p entql.StringP) {
	f.Where(p.Field(quote.FieldQuote))
}

// WhereAuthor applies the entql float32 predicate on the author field.
func (f *QuoteFilter) WhereAuthor(p entql.Float32P) {
	f.Where(p.Field(quote.FieldAuthor))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *QuoteFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(quote.FieldCreatedAt))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereTgID applies the entql int64 predicate on the tg_id field.
func (f *UserFilter) WhereTgID(p entql.Int64P) {
	f.Where(p.Field(user.FieldTgID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereSurname applies the entql string predicate on the surname field.
func (f *UserFilter) WhereSurname(p entql.StringP) {
	f.Where(p.Field(user.FieldSurname))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *UserFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(user.FieldPhone))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}
