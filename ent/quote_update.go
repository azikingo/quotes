// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"team-manager/ent/predicate"
	"team-manager/ent/quote"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuoteUpdate is the builder for updating Quote entities.
type QuoteUpdate struct {
	config
	hooks     []Hook
	mutation  *QuoteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the QuoteUpdate builder.
func (qu *QuoteUpdate) Where(ps ...predicate.Quote) *QuoteUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetQuote sets the "quote" field.
func (qu *QuoteUpdate) SetQuote(s string) *QuoteUpdate {
	qu.mutation.SetQuote(s)
	return qu
}

// SetNillableQuote sets the "quote" field if the given value is not nil.
func (qu *QuoteUpdate) SetNillableQuote(s *string) *QuoteUpdate {
	if s != nil {
		qu.SetQuote(*s)
	}
	return qu
}

// ClearQuote clears the value of the "quote" field.
func (qu *QuoteUpdate) ClearQuote() *QuoteUpdate {
	qu.mutation.ClearQuote()
	return qu
}

// SetAuthor sets the "author" field.
func (qu *QuoteUpdate) SetAuthor(f float32) *QuoteUpdate {
	qu.mutation.ResetAuthor()
	qu.mutation.SetAuthor(f)
	return qu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (qu *QuoteUpdate) SetNillableAuthor(f *float32) *QuoteUpdate {
	if f != nil {
		qu.SetAuthor(*f)
	}
	return qu
}

// AddAuthor adds f to the "author" field.
func (qu *QuoteUpdate) AddAuthor(f float32) *QuoteUpdate {
	qu.mutation.AddAuthor(f)
	return qu
}

// ClearAuthor clears the value of the "author" field.
func (qu *QuoteUpdate) ClearAuthor() *QuoteUpdate {
	qu.mutation.ClearAuthor()
	return qu
}

// SetCreatedAt sets the "created_at" field.
func (qu *QuoteUpdate) SetCreatedAt(t time.Time) *QuoteUpdate {
	qu.mutation.SetCreatedAt(t)
	return qu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qu *QuoteUpdate) SetNillableCreatedAt(t *time.Time) *QuoteUpdate {
	if t != nil {
		qu.SetCreatedAt(*t)
	}
	return qu
}

// Mutation returns the QuoteMutation object of the builder.
func (qu *QuoteUpdate) Mutation() *QuoteMutation {
	return qu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuoteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuoteUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuoteUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuoteUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (qu *QuoteUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QuoteUpdate {
	qu.modifiers = append(qu.modifiers, modifiers...)
	return qu
}

func (qu *QuoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(quote.Table, quote.Columns, sqlgraph.NewFieldSpec(quote.FieldID, field.TypeInt64))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Quote(); ok {
		_spec.SetField(quote.FieldQuote, field.TypeString, value)
	}
	if qu.mutation.QuoteCleared() {
		_spec.ClearField(quote.FieldQuote, field.TypeString)
	}
	if value, ok := qu.mutation.Author(); ok {
		_spec.SetField(quote.FieldAuthor, field.TypeFloat32, value)
	}
	if value, ok := qu.mutation.AddedAuthor(); ok {
		_spec.AddField(quote.FieldAuthor, field.TypeFloat32, value)
	}
	if qu.mutation.AuthorCleared() {
		_spec.ClearField(quote.FieldAuthor, field.TypeFloat32)
	}
	if value, ok := qu.mutation.CreatedAt(); ok {
		_spec.SetField(quote.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(qu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuoteUpdateOne is the builder for updating a single Quote entity.
type QuoteUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *QuoteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetQuote sets the "quote" field.
func (quo *QuoteUpdateOne) SetQuote(s string) *QuoteUpdateOne {
	quo.mutation.SetQuote(s)
	return quo
}

// SetNillableQuote sets the "quote" field if the given value is not nil.
func (quo *QuoteUpdateOne) SetNillableQuote(s *string) *QuoteUpdateOne {
	if s != nil {
		quo.SetQuote(*s)
	}
	return quo
}

// ClearQuote clears the value of the "quote" field.
func (quo *QuoteUpdateOne) ClearQuote() *QuoteUpdateOne {
	quo.mutation.ClearQuote()
	return quo
}

// SetAuthor sets the "author" field.
func (quo *QuoteUpdateOne) SetAuthor(f float32) *QuoteUpdateOne {
	quo.mutation.ResetAuthor()
	quo.mutation.SetAuthor(f)
	return quo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (quo *QuoteUpdateOne) SetNillableAuthor(f *float32) *QuoteUpdateOne {
	if f != nil {
		quo.SetAuthor(*f)
	}
	return quo
}

// AddAuthor adds f to the "author" field.
func (quo *QuoteUpdateOne) AddAuthor(f float32) *QuoteUpdateOne {
	quo.mutation.AddAuthor(f)
	return quo
}

// ClearAuthor clears the value of the "author" field.
func (quo *QuoteUpdateOne) ClearAuthor() *QuoteUpdateOne {
	quo.mutation.ClearAuthor()
	return quo
}

// SetCreatedAt sets the "created_at" field.
func (quo *QuoteUpdateOne) SetCreatedAt(t time.Time) *QuoteUpdateOne {
	quo.mutation.SetCreatedAt(t)
	return quo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (quo *QuoteUpdateOne) SetNillableCreatedAt(t *time.Time) *QuoteUpdateOne {
	if t != nil {
		quo.SetCreatedAt(*t)
	}
	return quo
}

// Mutation returns the QuoteMutation object of the builder.
func (quo *QuoteUpdateOne) Mutation() *QuoteMutation {
	return quo.mutation
}

// Where appends a list predicates to the QuoteUpdate builder.
func (quo *QuoteUpdateOne) Where(ps ...predicate.Quote) *QuoteUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuoteUpdateOne) Select(field string, fields ...string) *QuoteUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Quote entity.
func (quo *QuoteUpdateOne) Save(ctx context.Context) (*Quote, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuoteUpdateOne) SaveX(ctx context.Context) *Quote {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuoteUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuoteUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (quo *QuoteUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QuoteUpdateOne {
	quo.modifiers = append(quo.modifiers, modifiers...)
	return quo
}

func (quo *QuoteUpdateOne) sqlSave(ctx context.Context) (_node *Quote, err error) {
	_spec := sqlgraph.NewUpdateSpec(quote.Table, quote.Columns, sqlgraph.NewFieldSpec(quote.FieldID, field.TypeInt64))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Quote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quote.FieldID)
		for _, f := range fields {
			if !quote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != quote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Quote(); ok {
		_spec.SetField(quote.FieldQuote, field.TypeString, value)
	}
	if quo.mutation.QuoteCleared() {
		_spec.ClearField(quote.FieldQuote, field.TypeString)
	}
	if value, ok := quo.mutation.Author(); ok {
		_spec.SetField(quote.FieldAuthor, field.TypeFloat32, value)
	}
	if value, ok := quo.mutation.AddedAuthor(); ok {
		_spec.AddField(quote.FieldAuthor, field.TypeFloat32, value)
	}
	if quo.mutation.AuthorCleared() {
		_spec.ClearField(quote.FieldAuthor, field.TypeFloat32)
	}
	if value, ok := quo.mutation.CreatedAt(); ok {
		_spec.SetField(quote.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(quo.modifiers...)
	_node = &Quote{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
