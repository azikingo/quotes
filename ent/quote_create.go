// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"team-manager/ent/quote"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuoteCreate is the builder for creating a Quote entity.
type QuoteCreate struct {
	config
	mutation *QuoteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetQuote sets the "quote" field.
func (qc *QuoteCreate) SetQuote(s string) *QuoteCreate {
	qc.mutation.SetQuote(s)
	return qc
}

// SetNillableQuote sets the "quote" field if the given value is not nil.
func (qc *QuoteCreate) SetNillableQuote(s *string) *QuoteCreate {
	if s != nil {
		qc.SetQuote(*s)
	}
	return qc
}

// SetAuthor sets the "author" field.
func (qc *QuoteCreate) SetAuthor(f float32) *QuoteCreate {
	qc.mutation.SetAuthor(f)
	return qc
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (qc *QuoteCreate) SetNillableAuthor(f *float32) *QuoteCreate {
	if f != nil {
		qc.SetAuthor(*f)
	}
	return qc
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuoteCreate) SetCreatedAt(t time.Time) *QuoteCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuoteCreate) SetNillableCreatedAt(t *time.Time) *QuoteCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetID sets the "id" field.
func (qc *QuoteCreate) SetID(i int64) *QuoteCreate {
	qc.mutation.SetID(i)
	return qc
}

// Mutation returns the QuoteMutation object of the builder.
func (qc *QuoteCreate) Mutation() *QuoteMutation {
	return qc.mutation
}

// Save creates the Quote in the database.
func (qc *QuoteCreate) Save(ctx context.Context) (*Quote, error) {
	qc.defaults()
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuoteCreate) SaveX(ctx context.Context) *Quote {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuoteCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuoteCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuoteCreate) defaults() {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		v := quote.DefaultCreatedAt
		qc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuoteCreate) check() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Quote.created_at"`)}
	}
	return nil
}

func (qc *QuoteCreate) sqlSave(ctx context.Context) (*Quote, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuoteCreate) createSpec() (*Quote, *sqlgraph.CreateSpec) {
	var (
		_node = &Quote{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(quote.Table, sqlgraph.NewFieldSpec(quote.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = qc.conflict
	if id, ok := qc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := qc.mutation.Quote(); ok {
		_spec.SetField(quote.FieldQuote, field.TypeString, value)
		_node.Quote = value
	}
	if value, ok := qc.mutation.Author(); ok {
		_spec.SetField(quote.FieldAuthor, field.TypeFloat32, value)
		_node.Author = &value
	}
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(quote.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Quote.Create().
//		SetQuote(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuoteUpsert) {
//			SetQuote(v+v).
//		}).
//		Exec(ctx)
func (qc *QuoteCreate) OnConflict(opts ...sql.ConflictOption) *QuoteUpsertOne {
	qc.conflict = opts
	return &QuoteUpsertOne{
		create: qc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Quote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qc *QuoteCreate) OnConflictColumns(columns ...string) *QuoteUpsertOne {
	qc.conflict = append(qc.conflict, sql.ConflictColumns(columns...))
	return &QuoteUpsertOne{
		create: qc,
	}
}

type (
	// QuoteUpsertOne is the builder for "upsert"-ing
	//  one Quote node.
	QuoteUpsertOne struct {
		create *QuoteCreate
	}

	// QuoteUpsert is the "OnConflict" setter.
	QuoteUpsert struct {
		*sql.UpdateSet
	}
)

// SetQuote sets the "quote" field.
func (u *QuoteUpsert) SetQuote(v string) *QuoteUpsert {
	u.Set(quote.FieldQuote, v)
	return u
}

// UpdateQuote sets the "quote" field to the value that was provided on create.
func (u *QuoteUpsert) UpdateQuote() *QuoteUpsert {
	u.SetExcluded(quote.FieldQuote)
	return u
}

// ClearQuote clears the value of the "quote" field.
func (u *QuoteUpsert) ClearQuote() *QuoteUpsert {
	u.SetNull(quote.FieldQuote)
	return u
}

// SetAuthor sets the "author" field.
func (u *QuoteUpsert) SetAuthor(v float32) *QuoteUpsert {
	u.Set(quote.FieldAuthor, v)
	return u
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *QuoteUpsert) UpdateAuthor() *QuoteUpsert {
	u.SetExcluded(quote.FieldAuthor)
	return u
}

// AddAuthor adds v to the "author" field.
func (u *QuoteUpsert) AddAuthor(v float32) *QuoteUpsert {
	u.Add(quote.FieldAuthor, v)
	return u
}

// ClearAuthor clears the value of the "author" field.
func (u *QuoteUpsert) ClearAuthor() *QuoteUpsert {
	u.SetNull(quote.FieldAuthor)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *QuoteUpsert) SetCreatedAt(v time.Time) *QuoteUpsert {
	u.Set(quote.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *QuoteUpsert) UpdateCreatedAt() *QuoteUpsert {
	u.SetExcluded(quote.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Quote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(quote.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *QuoteUpsertOne) UpdateNewValues() *QuoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(quote.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Quote.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *QuoteUpsertOne) Ignore() *QuoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuoteUpsertOne) DoNothing() *QuoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuoteCreate.OnConflict
// documentation for more info.
func (u *QuoteUpsertOne) Update(set func(*QuoteUpsert)) *QuoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuote sets the "quote" field.
func (u *QuoteUpsertOne) SetQuote(v string) *QuoteUpsertOne {
	return u.Update(func(s *QuoteUpsert) {
		s.SetQuote(v)
	})
}

// UpdateQuote sets the "quote" field to the value that was provided on create.
func (u *QuoteUpsertOne) UpdateQuote() *QuoteUpsertOne {
	return u.Update(func(s *QuoteUpsert) {
		s.UpdateQuote()
	})
}

// ClearQuote clears the value of the "quote" field.
func (u *QuoteUpsertOne) ClearQuote() *QuoteUpsertOne {
	return u.Update(func(s *QuoteUpsert) {
		s.ClearQuote()
	})
}

// SetAuthor sets the "author" field.
func (u *QuoteUpsertOne) SetAuthor(v float32) *QuoteUpsertOne {
	return u.Update(func(s *QuoteUpsert) {
		s.SetAuthor(v)
	})
}

// AddAuthor adds v to the "author" field.
func (u *QuoteUpsertOne) AddAuthor(v float32) *QuoteUpsertOne {
	return u.Update(func(s *QuoteUpsert) {
		s.AddAuthor(v)
	})
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *QuoteUpsertOne) UpdateAuthor() *QuoteUpsertOne {
	return u.Update(func(s *QuoteUpsert) {
		s.UpdateAuthor()
	})
}

// ClearAuthor clears the value of the "author" field.
func (u *QuoteUpsertOne) ClearAuthor() *QuoteUpsertOne {
	return u.Update(func(s *QuoteUpsert) {
		s.ClearAuthor()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *QuoteUpsertOne) SetCreatedAt(v time.Time) *QuoteUpsertOne {
	return u.Update(func(s *QuoteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *QuoteUpsertOne) UpdateCreatedAt() *QuoteUpsertOne {
	return u.Update(func(s *QuoteUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *QuoteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QuoteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuoteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *QuoteUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *QuoteUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// QuoteCreateBulk is the builder for creating many Quote entities in bulk.
type QuoteCreateBulk struct {
	config
	err      error
	builders []*QuoteCreate
	conflict []sql.ConflictOption
}

// Save creates the Quote entities in the database.
func (qcb *QuoteCreateBulk) Save(ctx context.Context) ([]*Quote, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Quote, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = qcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuoteCreateBulk) SaveX(ctx context.Context) []*Quote {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuoteCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuoteCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Quote.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuoteUpsert) {
//			SetQuote(v+v).
//		}).
//		Exec(ctx)
func (qcb *QuoteCreateBulk) OnConflict(opts ...sql.ConflictOption) *QuoteUpsertBulk {
	qcb.conflict = opts
	return &QuoteUpsertBulk{
		create: qcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Quote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qcb *QuoteCreateBulk) OnConflictColumns(columns ...string) *QuoteUpsertBulk {
	qcb.conflict = append(qcb.conflict, sql.ConflictColumns(columns...))
	return &QuoteUpsertBulk{
		create: qcb,
	}
}

// QuoteUpsertBulk is the builder for "upsert"-ing
// a bulk of Quote nodes.
type QuoteUpsertBulk struct {
	create *QuoteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Quote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(quote.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *QuoteUpsertBulk) UpdateNewValues() *QuoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(quote.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Quote.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *QuoteUpsertBulk) Ignore() *QuoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuoteUpsertBulk) DoNothing() *QuoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuoteCreateBulk.OnConflict
// documentation for more info.
func (u *QuoteUpsertBulk) Update(set func(*QuoteUpsert)) *QuoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuote sets the "quote" field.
func (u *QuoteUpsertBulk) SetQuote(v string) *QuoteUpsertBulk {
	return u.Update(func(s *QuoteUpsert) {
		s.SetQuote(v)
	})
}

// UpdateQuote sets the "quote" field to the value that was provided on create.
func (u *QuoteUpsertBulk) UpdateQuote() *QuoteUpsertBulk {
	return u.Update(func(s *QuoteUpsert) {
		s.UpdateQuote()
	})
}

// ClearQuote clears the value of the "quote" field.
func (u *QuoteUpsertBulk) ClearQuote() *QuoteUpsertBulk {
	return u.Update(func(s *QuoteUpsert) {
		s.ClearQuote()
	})
}

// SetAuthor sets the "author" field.
func (u *QuoteUpsertBulk) SetAuthor(v float32) *QuoteUpsertBulk {
	return u.Update(func(s *QuoteUpsert) {
		s.SetAuthor(v)
	})
}

// AddAuthor adds v to the "author" field.
func (u *QuoteUpsertBulk) AddAuthor(v float32) *QuoteUpsertBulk {
	return u.Update(func(s *QuoteUpsert) {
		s.AddAuthor(v)
	})
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *QuoteUpsertBulk) UpdateAuthor() *QuoteUpsertBulk {
	return u.Update(func(s *QuoteUpsert) {
		s.UpdateAuthor()
	})
}

// ClearAuthor clears the value of the "author" field.
func (u *QuoteUpsertBulk) ClearAuthor() *QuoteUpsertBulk {
	return u.Update(func(s *QuoteUpsert) {
		s.ClearAuthor()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *QuoteUpsertBulk) SetCreatedAt(v time.Time) *QuoteUpsertBulk {
	return u.Update(func(s *QuoteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *QuoteUpsertBulk) UpdateCreatedAt() *QuoteUpsertBulk {
	return u.Update(func(s *QuoteUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *QuoteUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the QuoteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QuoteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuoteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
